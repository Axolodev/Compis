
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '1ACC80752C186853FE53FF5C35F6BC3E'
    
_lr_action_items = {'RIGHT_BRACKET':([12,18,20,22,23,25,26,33,34,47,48,53,64,75,76,81,82,84,85,86,],[20,-14,-1,20,-20,-18,-19,-17,-16,-34,-15,-36,-37,-39,-40,-21,-1,-43,-41,-42,]),'CONST_NUMBER_FLOAT':([21,31,32,38,46,49,52,58,60,65,66,],[41,41,-35,41,41,41,41,41,41,-25,41,]),'EQUAL_OPERATOR':([24,],[49,]),'SEMICOLON':([27,28,29,35,37,40,41,42,43,45,54,55,56,57,59,61,62,63,67,68,70,77,78,79,80,],[-13,-12,50,-46,-48,-1,-49,-1,-47,-1,76,-45,-26,-27,-28,-31,-30,-32,-24,-22,81,-29,-33,-23,-44,]),'KEYWORD_PRINT':([12,18,20,22,23,25,26,33,34,47,48,53,64,75,76,81,82,84,85,86,],[19,-14,-1,19,-20,-18,-19,-17,-16,-34,-15,-36,-37,-39,-40,-21,-1,-43,-41,-42,]),'COLON':([3,10,],[4,14,]),'COMMA':([10,],[16,]),'IDENTIFIER':([1,6,12,16,18,20,21,22,23,25,26,31,32,33,34,38,46,47,48,49,50,52,53,58,60,64,65,66,75,76,81,82,84,85,86,],[3,10,24,10,-14,-1,43,24,-20,-18,-19,43,-35,-17,-16,43,43,-34,-15,43,10,43,-36,43,43,-37,-25,43,-39,-40,-21,-1,-43,-41,-42,]),'COMPARISON_OPERATOR':([35,37,40,41,42,43,45,55,56,57,59,61,62,63,77,78,80,],[-46,-48,-1,-49,-1,-47,65,-45,-26,-27,-28,-31,-30,-32,-29,-33,-44,]),'LEFT_PARENTHESIS':([17,19,21,31,32,46,49,52,58,60,65,66,],[31,32,46,46,-35,46,46,46,46,46,-25,46,]),'$end':([2,11,18,20,33,34,48,],[0,-2,-14,-1,-17,-16,-15,]),'TERM_OPERATOR':([35,37,41,42,43,55,80,],[-46,-48,-49,60,-47,-45,-44,]),'KEYWORD_ELSE':([18,20,33,34,48,82,],[-14,-1,-17,-16,-15,83,]),'KEYWORD_VAR':([4,],[6,]),'PERIOD':([35,36,37,39,40,41,42,43,44,45,55,56,57,59,61,62,63,67,68,77,78,79,80,],[-46,52,-48,-38,-1,-49,-1,-47,52,-1,-45,-26,-27,-28,-31,-30,-32,-24,-22,-29,-33,-23,-44,]),'KEYWORD_PROGRAM':([0,],[1,]),'KEYWORD_TYPE_INT':([14,],[28,]),'RIGHT_PARENTHESIS':([35,36,37,39,40,41,42,43,44,45,51,55,56,57,59,61,62,63,67,68,69,77,78,79,80,],[-46,54,-48,-38,-1,-49,-1,-47,54,-1,74,-45,-26,-27,-28,-31,-30,-32,-24,-22,80,-29,-33,-23,-44,]),'KEYWORD_IF':([12,18,20,22,23,25,26,33,34,47,48,53,64,75,76,81,82,84,85,86,],[17,-14,-1,17,-20,-18,-19,-17,-16,-34,-15,-36,-37,-39,-40,-21,-1,-43,-41,-42,]),'CONST_NUMBER_INT':([21,31,32,38,46,49,52,58,60,65,66,],[37,37,-35,37,37,37,37,37,37,-25,37,]),'KEYWORD_TYPE_FLOAT':([14,],[27,]),'CONST_STRING':([21,32,52,],[39,-35,39,]),'LEFT_BRACKET':([4,5,7,8,9,13,15,30,50,71,72,73,74,83,],[-1,-3,12,-4,-5,-6,-8,-7,-1,-9,-10,-11,12,12,]),'EXP_OPERATOR':([21,31,32,35,37,40,41,42,43,46,49,52,55,58,60,61,62,63,65,66,78,80,],[38,38,-35,-46,-48,58,-49,-1,-47,38,38,38,-45,38,38,-31,-30,-32,-25,38,-33,-44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'vars':([4,],[5,]),'exp_end_f':([40,],[57,]),'var_type_def':([14,],[29,]),'block_end_output':([20,],[34,]),'var_type_start':([10,],[15,]),'exp_comparison_output':([45,],[66,]),'exp_comparison':([45,],[68,]),'var_declaration_end':([10,],[13,]),'write_end':([36,44,],[53,64,]),'var_declaration_start':([6,16,50,],[9,30,72,]),'program':([0,],[2,]),'term_end':([42,],[62,]),'statement':([12,22,],[22,22,]),'factor':([21,31,46,49,52,58,60,66,],[42,42,42,42,42,42,42,42,]),'output_output':([12,22,],[21,21,]),'constant_val':([21,31,38,46,49,52,58,60,66,],[35,35,55,35,35,35,35,35,35,]),'empty':([4,20,40,42,45,50,82,],[8,33,59,63,67,73,84,]),'write_start':([21,52,],[47,75,]),'write_start_output':([21,52,],[36,36,]),'block_end':([12,22,],[18,48,]),'program_vars':([4,],[7,]),'term_start':([21,31,46,49,52,58,60,66,],[40,40,40,40,40,40,78,40,]),'condition':([12,22,],[26,26,]),'exp_end':([40,],[56,]),'term_end_output':([42,],[61,]),'var_type_end':([50,],[71,]),'block_start':([7,74,83,],[11,82,86,]),'assign':([12,22,],[25,25,]),'condition_else':([82,],[85,]),'output':([12,22,],[23,23,]),'expression':([21,31,46,49,52,],[44,51,69,70,44,]),'exp_start':([21,31,46,49,52,58,66,],[45,45,45,45,45,77,79,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','scanner.py',72),
  ('program -> KEYWORD_PROGRAM IDENTIFIER COLON program_vars block_start','program',5,'p_program','scanner.py',77),
  ('program_vars -> vars','program_vars',1,'p_program_vars','scanner.py',83),
  ('program_vars -> empty','program_vars',1,'p_program_vars','scanner.py',84),
  ('vars -> KEYWORD_VAR var_declaration_start','vars',2,'p_vars','scanner.py',90),
  ('var_declaration_start -> IDENTIFIER var_declaration_end','var_declaration_start',2,'p_var_declaration_start','scanner.py',96),
  ('var_declaration_end -> COMMA var_declaration_start','var_declaration_end',2,'p_var_declaration_end','scanner.py',102),
  ('var_declaration_end -> var_type_start','var_declaration_end',1,'p_var_declaration_end','scanner.py',103),
  ('var_type_start -> COLON var_type_def SEMICOLON var_type_end','var_type_start',4,'p_var_type_start','scanner.py',111),
  ('var_type_end -> var_declaration_start','var_type_end',1,'p_var_type_end','scanner.py',117),
  ('var_type_end -> empty','var_type_end',1,'p_var_type_end','scanner.py',118),
  ('var_type_def -> KEYWORD_TYPE_INT','var_type_def',1,'p_var_type_def','scanner.py',125),
  ('var_type_def -> KEYWORD_TYPE_FLOAT','var_type_def',1,'p_var_type_def','scanner.py',126),
  ('block_start -> LEFT_BRACKET block_end','block_start',2,'p_block_start','scanner.py',132),
  ('block_end -> statement block_end','block_end',2,'p_block_end','scanner.py',138),
  ('block_end -> RIGHT_BRACKET block_end_output','block_end',2,'p_block_end','scanner.py',139),
  ('block_end_output -> empty','block_end_output',1,'p_block_end_output','scanner.py',145),
  ('statement -> assign','statement',1,'p_statement','scanner.py',151),
  ('statement -> condition','statement',1,'p_statement','scanner.py',152),
  ('statement -> output','statement',1,'p_statement','scanner.py',153),
  ('assign -> IDENTIFIER EQUAL_OPERATOR expression SEMICOLON','assign',4,'p_assign','scanner.py',159),
  ('expression -> exp_start exp_comparison','expression',2,'p_expression','scanner.py',165),
  ('exp_comparison -> exp_comparison_output exp_start','exp_comparison',2,'p_exp_comparison','scanner.py',171),
  ('exp_comparison -> empty','exp_comparison',1,'p_exp_comparison','scanner.py',172),
  ('exp_comparison_output -> COMPARISON_OPERATOR','exp_comparison_output',1,'p_exp_comparison_output','scanner.py',178),
  ('exp_start -> term_start exp_end','exp_start',2,'p_exp_start','scanner.py',184),
  ('exp_end -> exp_end_f','exp_end',1,'p_exp_end','scanner.py',190),
  ('exp_end -> empty','exp_end',1,'p_exp_end','scanner.py',191),
  ('exp_end_f -> EXP_OPERATOR exp_start','exp_end_f',2,'p_exp_end_f','scanner.py',197),
  ('term_start -> factor term_end','term_start',2,'p_term_start','scanner.py',206),
  ('term_end -> term_end_output','term_end',1,'p_term_end','scanner.py',212),
  ('term_end -> empty','term_end',1,'p_term_end','scanner.py',213),
  ('term_end_output -> TERM_OPERATOR term_start','term_end_output',2,'p_term_end_output','scanner.py',219),
  ('output -> output_output write_start','output',2,'p_output','scanner.py',225),
  ('output_output -> KEYWORD_PRINT LEFT_PARENTHESIS','output_output',2,'p_output_output','scanner.py',232),
  ('write_start -> write_start_output write_end','write_start',2,'p_write_start','scanner.py',238),
  ('write_start -> expression write_end','write_start',2,'p_write_start','scanner.py',239),
  ('write_start_output -> CONST_STRING','write_start_output',1,'p_write_start_output','scanner.py',245),
  ('write_end -> PERIOD write_start','write_end',2,'p_write_end','scanner.py',251),
  ('write_end -> RIGHT_PARENTHESIS SEMICOLON','write_end',2,'p_write_end','scanner.py',252),
  ('condition -> KEYWORD_IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS block_start condition_else','condition',6,'p_condition','scanner.py',258),
  ('condition_else -> KEYWORD_ELSE block_start','condition_else',2,'p_condition_else','scanner.py',264),
  ('condition_else -> empty','condition_else',1,'p_condition_else','scanner.py',265),
  ('factor -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS','factor',3,'p_factor','scanner.py',271),
  ('factor -> EXP_OPERATOR constant_val','factor',2,'p_factor','scanner.py',272),
  ('factor -> constant_val','factor',1,'p_factor','scanner.py',273),
  ('constant_val -> IDENTIFIER','constant_val',1,'p_constant_val','scanner.py',280),
  ('constant_val -> CONST_NUMBER_INT','constant_val',1,'p_constant_val','scanner.py',281),
  ('constant_val -> CONST_NUMBER_FLOAT','constant_val',1,'p_constant_val','scanner.py',282),
]
